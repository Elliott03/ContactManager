

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author elliott
 */
public class ContactFrame extends javax.swing.JFrame
{
    // create a reference for the default list model for the list
    DefaultListModel<String> model;

    ArrayList<Contact> contactArrayList = new ArrayList<Contact>();
    

    public ContactFrame()
    {
        initComponents();
        
        // create the default list model object
        model = new DefaultListModel<String>();
        
        // set the model to the list
        lstContacts.setModel(model);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        txtPhone = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtStreet = new javax.swing.JTextField();
        txtCity = new javax.swing.JTextField();
        txtState = new javax.swing.JTextField();
        txtZip = new javax.swing.JTextField();
        lblCount = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstContacts = new javax.swing.JList<>();
        cbxContactType = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        lblDependentInfo = new javax.swing.JLabel();
        txtDependentInfo = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnLoad = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Final Project by Phillips"));

        jLabel1.setText("Name");

        jLabel2.setText("Phone");

        jLabel3.setText("Email");

        txtName.setText("smith");

        txtPhone.setText("111-1111");

        txtEmail.setText("smith@gmail.com");

        jLabel4.setText("Street");

        jLabel5.setText("City");

        jLabel6.setText("State");

        jLabel7.setText("Zip");

        txtStreet.setText("123 Center");

        txtCity.setText("mentor");

        txtState.setText("oh");

        txtZip.setText("44060");

        lblCount.setText("Count: 0");

        jScrollPane1.setViewportView(lstContacts);

        cbxContactType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Business", "Family", "Friend" }));
        cbxContactType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxContactTypeActionPerformed(evt);
            }
        });

        jLabel8.setText("Type");

        lblDependentInfo.setText("Company");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel1)
                                            .addComponent(jLabel2))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txtName, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                                            .addComponent(txtPhone)))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel3)
                                            .addComponent(jLabel8))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(cbxContactType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtEmail, javax.swing.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE))))
                                .addGap(9, 9, 9)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtState, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtZip, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel4)
                                            .addComponent(jLabel5))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txtStreet, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE)
                                            .addComponent(txtCity)))))
                            .addComponent(lblCount)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(lblDependentInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(txtDependentInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(txtStreet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(txtState, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtZip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(cbxContactType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDependentInfo)
                    .addComponent(txtDependentInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addComponent(lblCount)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
        );

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnLoad.setText("Load");
        btnLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadActionPerformed(evt);
            }
        });

        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAdd)
                        .addGap(18, 18, 18)
                        .addComponent(btnDelete)
                        .addGap(18, 18, 18)
                        .addComponent(clearButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSave)
                        .addGap(18, 18, 18)
                        .addComponent(btnLoad)
                        .addGap(18, 18, 18)
                        .addComponent(btnExit)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd)
                    .addComponent(btnExit)
                    .addComponent(btnDelete)
                    .addComponent(btnSave)
                    .addComponent(btnLoad)
                    .addComponent(clearButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>                        

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt)                                        
    {                                            
        System.exit(0);
    }                                       
    private void sortContacts() {
        
        // sort the arrayList with no comparitor, use the compareTo method. This comes from Contact extending Comparable
        contactArrayList.sort(null);
        
        // Clear the model
        model.removeAllElements();
        
        // Adds each element back to the model with a foreach loop
        for(Contact so : contactArrayList)
        {
            model.addElement(so.toString());
        }
    }
    private void clearTextFields() {
        // Clears all inputs on the model
        txtName.setText("");
        txtPhone.setText("");
        txtEmail.setText("");
        txtStreet.setText("");
        txtCity.setText("");
        txtState.setText("");
        txtZip.setText("");
        txtDependentInfo.setText("");
    }
    private void btnAddActionPerformed(java.awt.event.ActionEvent evt)                                       
    {                                           
        addContact();
        clearTextFields();
        sortContacts();
    }                                      

    private void cbxContactTypeActionPerformed(java.awt.event.ActionEvent evt)                                               
    {                                                   
        // Determines which input on the combobox was selected. Using numbers because we enumerated ContactType in the Contact class
        switch(cbxContactType.getSelectedIndex())
        {
            case 0:
                lblDependentInfo.setText("Company");
                break;
            case 1:
                lblDependentInfo.setText("Relationship");
                break;
            case 2:
                lblDependentInfo.setText("Year Met");
                break;
        }
        
        // Clear text box
        txtDependentInfo.setText("");
    }                                              
    private void deleteContact() {
        // Removes a contact from the model
        model.remove(lstContacts.getSelectedIndex());
    }

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt)                                          
    {                                              
        // Store the selected contact as a String in strSelected
        String strSelected = lstContacts.getSelectedValue();
        
        // If no contact selected, display an error
        if(strSelected == null)
        {
            JOptionPane.showMessageDialog(this, "Nothing Seleced in List Box", 
                    "Deletion Error!", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Get the name by finding the chacters starting at 0 upto but not including the ,
        String strName = strSelected.substring(0, strSelected.indexOf(','));
        
        // R-emove the element from the arrayList
        for(Contact contact : contactArrayList)
        {
            if(contact.getName().equals(strName))
            {
                System.out.println("Removed: " + contact);
                contactArrayList.remove(contact);
                break;
            }
        }
        
        // Remove the selected value from the model by getting the selected index
        deleteContact();
        
        // Decrement the count
        Contact.decrementCount();
        
        // Get the current count from the Employee class and display it in the label
        lblCount.setText("Count: " + Contact.getCount());
    }                                         

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt)                                        
    {                                            
        // create a BufferedWriter and use it to write to the file.
    try
        {
            // create JFileChooser
            JFileChooser fc = new JFileChooser();
            
            // display save dialog
            fc.showSaveDialog(this);
            
            // get selected file
            File file = fc.getSelectedFile();
            
            // Open the file
            try (BufferedWriter myWriter = new BufferedWriter(new FileWriter(file)))
            {
                // use a for loop to write all the employees to the file
                for (Contact contact : contactArrayList)
                {
                    myWriter.write(contact.toFile() + System.getProperty("line.separator"));
                }
            }
        } 
        catch (IOException e)
        {
            System.out.println(e);
            JOptionPane.showMessageDialog(null, e.getMessage(), "File Write Error", JOptionPane.ERROR_MESSAGE);
        }
    }                                       
    private void addContact() {
  
        // Create variable of type ContactType
        Contact.ContactType type = Contact.ContactType.BUSINESS;
        
        Contact contact = null;

        try
        {
            // Determine what the contact type is
            switch (cbxContactType.getSelectedIndex())
            {
                case 0:
                    type = Contact.ContactType.BUSINESS;

                    // Create the ContactBusiness object from input
                    contact = new ContactBusiness(txtName.getText(), txtPhone.getText(), txtEmail.getText(),
                             txtStreet.getText(), txtCity.getText(),
                            txtState.getText(), txtZip.getText(), type, txtDependentInfo.getText());

                    // Add the ContactBusiness info to the model for the listbox
                    model.addElement(contact.toString());
                    
                    // Add the object to the arrayList
                    contactArrayList.add(contact);
                    break;
                case 1:
                    type = Contact.ContactType.FAMILY;

                    // Create the ContactFamily object from input
                    contact = new ContactFamily(txtName.getText(), txtPhone.getText(), txtEmail.getText(),
                             txtStreet.getText(), txtCity.getText(),
                            txtState.getText(), txtZip.getText(), type, txtDependentInfo.getText());

                    // Add the ContactFamily info to the model for the listbox
                    model.addElement(contact.toString());
                    
                    // Add the object to the arrayList
                    contactArrayList.add(contact);
                    break;
                case 2:
                    type = Contact.ContactType.FRIEND;

                    // Create the ContactFamily object from input
                    contact = new ContactFriend(txtName.getText(), txtPhone.getText(), txtEmail.getText(),
                             txtStreet.getText(), txtCity.getText(),
                            txtState.getText(), txtZip.getText(), type,
                            Integer.parseInt(txtDependentInfo.getText()));

                    // Add the ContactFamily info to the model for the listbox
                    model.addElement(contact.toString());
                    
                    // add the object to the arrayList
                    contactArrayList.add(contact);
                    break;
            }

            // Get the current count from the Contact class and display it in the label
            lblCount.setText("Count: " + Contact.getCount());
        }
        catch(ContactException ex)
        {
            JOptionPane.showMessageDialog(this, ex.getMessage(), 
                    "Contact Creation Error", JOptionPane.ERROR_MESSAGE);
        }
        catch(Exception ex)
        {
            JOptionPane.showMessageDialog(this, ex.getMessage(), 
                    "Contact Creation Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    private void btnLoadActionPerformed(java.awt.event.ActionEvent evt)                                        
    {                                            
        // Clears the model and sets count to 0
        model.clear();
        lblCount.setText("Count: 0");
        
        try
        {
            // Create JFileChooser
            JFileChooser fc = new JFileChooser();
            
            // Display save dialog
            fc.showOpenDialog(this);
            
            // Get selected file
            File file = fc.getSelectedFile();
            
            // Create the BufferedReader
            try (BufferedReader myReader = new BufferedReader(new FileReader(file)))
            {

                // Create reference to String to hold line from file
                String line;

                // Create reference to array to hold individual fields from the string.
                String[] fields;

                // Read the first line
                line = myReader.readLine();

                // Create reference to Employee object.
                Contact contact;

                // If the line exists
                while (line != null)
                {
                    
                    // Split line it into its fields.
                    fields = line.split(",");

                    // Get the type from field 7
                    Contact.ContactType type = Contact.ContactType.valueOf(fields[7]);

                    // Decide which type it is
                    switch (type)
                    {
                        case BUSINESS:
                            contact = new ContactBusiness(fields[0], fields[1], fields[2], fields[3],
                                    fields[4], fields[5], fields[6], type, fields[8]);

                            // Add the ContactBusiness to the model for the listbox
                            model.addElement(contact.toString());

                            // Add the object to the arrayList
                            contactArrayList.add(contact);
                            break;
                        case FAMILY:
                            contact = new ContactFamily(fields[0], fields[1], fields[2], fields[3],
                                    fields[4], fields[5], fields[6], type, fields[8]);

                            // Add the ContactBusiness to the model for the listbox
                            model.addElement(contact.toString());

                            // Add the object to the arrayList
                            contactArrayList.add(contact);
                            break;
                        case FRIEND:
                            contact = new ContactFriend(fields[0], fields[1], fields[2], fields[3],
                                    fields[4], fields[5], fields[6], type, Integer.parseInt(fields[8]));

                            // Add the ContactBusiness to the model for the listbox
                            model.addElement(contact.toString());

                            // Add the object to the arrayList
                            contactArrayList.add(contact);
                            break;
                        default:
                            System.out.println("Error: number of fields not 8");
                            break;
                    }

                    // Read the next line.
                    line = myReader.readLine();
                }
            }
            // Get the current count from the Contact class and display it in the label
            lblCount.setText("Count: " + Contact.getCount());
        }
        catch (IOException | ContactException e)
        {
            JOptionPane.showMessageDialog(null, e.getMessage(), "File Read Error", JOptionPane.ERROR_MESSAGE);
        }
        catch (ArrayIndexOutOfBoundsException e) {
            JOptionPane.showMessageDialog(null, "Not all fields given", e.getMessage(), JOptionPane.ERROR_MESSAGE);
        }
    }                                       

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {                                            
        contactArrayList.clear();
        model.removeAllElements();
        Contact.setCount(0);
        lblCount.setText("Count: " + Contact.getCount());
        
    }                                           

    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(ContactFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(ContactFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(ContactFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(ContactFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new ContactFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnLoad;
    private javax.swing.JButton btnSave;
    private javax.swing.JComboBox<String> cbxContactType;
    private javax.swing.JButton clearButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCount;
    private javax.swing.JLabel lblDependentInfo;
    private javax.swing.JList<String> lstContacts;
    private javax.swing.JTextField txtCity;
    private javax.swing.JTextField txtDependentInfo;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPhone;
    private javax.swing.JTextField txtState;
    private javax.swing.JTextField txtStreet;
    private javax.swing.JTextField txtZip;
    // End of variables declaration                   
}
